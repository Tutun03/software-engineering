Q) Calculate the no of identifier.

%{#include<iostream.h>
int count=0;
char ch=0;
%}
digit[0-9]
letter[a-zA-Z_]

%%
{letter}({letter}|{digit})* {
 count++;
}

%%
int main()
{
 yylex();
 printf("count: %d",count);
 return 0;
} 


Q)Write a YAAC Program to test the validity of a simple expression involving
operators +, -, * and /

yacc part:
%{
#include<stdio.h>
#include<stdlib.h>
%}

%token num
%left '+' '-'
%left '*' '/'

%%
input:exp {printf("%d\n",$$);exit(0);}
exp:	exp'+'exp {$$=$1+$3;}
		|exp'-'exp{$$=$1-$3;}
		|exp'*'exp{$$=$1*$3;}
		|exp'/'exp { if($3==0){printf("Divide by Zero. Invalid expression.\n");exit(0);}
		else $$=$1/$3;}
		|'('exp')'{$$=$2;}
		|num{$$=$1;};
%%

int yyerror()
{
	printf("Error. Invalid Expression.\n");
	exit(0);
}
int main()
{
	printf("Enter an expression:\n");
	yyparse();
}

lex part:
%{
#include "y.tab.h"
extern yylval;
%}

%%
[0-9]+ 		{yylval=atoi(yytext);return num;}
[\+\-\*\/] 	{return yytext[0];}
[)] 		{return yytext[0];}
[(] 		{return yytext[0];}
. 			{;}
\n 			{return 0;}
%%


Q)Write a YAAC Program to recognize strings ‘aaab’, ‘abbb’, ‘ab’ and ‘a’ using
grammar (an b n , n>=0)

lex part:
%{
   /* Definition section */
  #include "y.tab.h"
 %}
  
/* Rule Section */
 %%
[aA] {return A;}
[bB] {return B;}
\n {return NL;}
.  {return yytext[0];}
%%
  
int yywrap() 
 { 
  return 1; 
 } 

yacc part:
%{
   /* Definition section */
   #include<stdio.h>
   #include<stdlib.h>
%}
  
%token A B NL
  
/* Rule Section */
%%
stmt: S NL  { printf("valid string\n");
              exit(0); }
;
S: A S B |
;
%%
  
int yyerror(char *msg)
 {
  printf("invalid string\n");
  exit(0);
 }
  
//driver code 
main()
 {
  printf("enter the string\n");
  yyparse();
 }

Q)Write a YAAC Program to recognize a valid variable, which starts with a
letter, followed by any number of letters or digits.

LEX PART:

%{

    #include "y.tab.h"

%}

%%

[a-zA-Z_][a-zA-Z_0-9]* return letter;

[0-9]                       return digit;

.                      return yytext[0];

\n                     return 0;

%%

int yywrap()

{

return 1;

}

YACC PART:

%{

    #include<stdio.h>

    int valid=1;

%}

%token digit letter

%%

start : letter s

s :     letter s

      | digit s

      |

      ;

%%

int yyerror()

{

    printf("\nIts not a identifier!\n");

    valid=0;

    return 0;

}

int main()

{

    printf("\nEnter a name to tested for identifier ");

    yyparse();

    if(valid)

    {

        printf("\nIt is a identifier!\n");

    }

}


Q)Write a YAAC Program to recognize the grammar (an b, n>=10)

Yacc Part :

%token A B NL
%%
stmt : A A A A A A A A A A s B NL
 {
 Printf(“Valid”); exit(0);
 }
 ;
s : s A
 |
 ;
int yyerror(char *msg)
{
 printf(“Invalid String\n”);
 exit(0);
}
main ()
{
 printf(“Enter the String\n”);
 yyparse();
}

Lex Part :

%{
 #include “y.tab.h”
%}
%%
[aA] { return A; }
[bB] { return B; }
\n { return NL ;}
. { return yytext[0]; }
%% 

Q)Write a YACC Program to implement arithmetic calculator.

LEX PART:

%{

#include<stdio.h>

#include "y.tab.h"

extern int yylval;

%}



%%

[0-9]+ {

          yylval=atoi(yytext);

          return NUMBER;

       }

[\t] ;

[\n] return 0;

. return yytext[0];

%%

int yywrap()

{

return 1;

}

YACC PART:

%{

    #include<stdio.h>

    int flag=0;

   

%}

%token NUMBER



%left '+' '-'

%left '*' '/' '%'

%left '(' ')'

%%

ArithmeticExpression: E{

         printf("\nResult=%d\n",$$);

         return 0;

        };

E:E'+'E {$$=$1+$3;}

 |E'-'E {$$=$1-$3;}

 |E'*'E {$$=$1*$3;}

 |E'/'E {$$=$1/$3;}

 |E'%'E {$$=$1%$3;}

 |'('E')' {$$=$2;}

 | NUMBER {$$=$1;}

;

%%



void main()

{

   printf("\nEnter Any Arithmetic Expression which can have operations Addition, Subtraction, Multiplication, Divison, Modulus and Round brackets:\n");

   yyparse();

  if(flag==0)

   printf("\nEntered arithmetic expression is Valid\n\n");

 

}

void yyerror()

{

   printf("\nEntered arithmetic expression is Invalid\n\n");

   flag=1;

}


